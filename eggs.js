// Generated by CoffeeScript 1.3.3
(function() {
  var FallingThing, Game, Player, World,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var game;
    game = new Game;
    return game.run();
  });

  Game = (function() {

    Game.prototype.FPS = 60;

    function Game() {
      this.main = __bind(this.main, this);

      var _this = this;
      this.lastUpdate = Date.now();
      this.keysDown = {};
      $("body").keydown(function(e) {
        var _ref;
        _this.keysDown[e.keyCode] = true;
        if ((_ref = e.keyCode) === 37 || _ref === 39) {
          return e.preventDefault();
        }
      });
      $("body").keyup(function(e) {
        var _ref;
        delete _this.keysDown[e.keyCode];
        if ((_ref = e.keyCode) === 37 || _ref === 39) {
          return e.preventDefault();
        }
      });
      this.world = new World;
    }

    Game.prototype.main = function() {
      var delta;
      delta = Date.now() - this.lastUpdate;
      this.update(delta);
      this.render();
      return this.lastUpdate = Date.now();
    };

    Game.prototype.reactToInput = function() {
      var lane;
      if (37 in this.keysDown) {
        lane = 1;
      } else if (39 in this.keysDown) {
        lane = 3;
      } else {
        lane = 2;
      }
      return this.world.player.moveToLane(lane);
    };

    Game.prototype.update = function(delta) {
      this.reactToInput();
      return this.world.update(delta);
    };

    Game.prototype.render = function() {
      return this.world.render();
    };

    Game.prototype.run = function() {
      return setInterval(this.main, 1000 / this.FPS);
    };

    return Game;

  })();

  World = (function() {

    World.prototype.height = 500;

    World.prototype.width = 500;

    World.prototype.laneLineWidth = 10;

    World.prototype.numLanes = 3;

    function World() {
      this.middleOfLane = __bind(this.middleOfLane, this);
      this.laneWidth = this.width / this.numLanes;
      this.timeSinceLastThingFell = 2000;
      this.canvas = document.getElementById('game');
      this.canvas.width = this.canvas.parentNode.clientWidth;
      this.canvas.height = this.canvas.parentNode.clientHeight;
      this.ctx = this.canvas.getContext('2d');
      this.ctx.webkitImageSmoothingEnabled = false;
      this.score = 0;
      this.player = new Player(this);
      this.objects = [this.player];
    }

    World.prototype.aliveObjects = function() {
      var object;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.objects;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          object = _ref[_i];
          if (object.dead !== true) {
            _results.push(object);
          }
        }
        return _results;
      }).call(this);
    };

    World.prototype.update = function(delta) {
      var object, _i, _len, _ref, _results;
      this.timeSinceLastThingFell += delta;
      if (this.timeSinceLastThingFell >= 1000) {
        this.objects.push(new FallingThing(this));
        this.timeSinceLastThingFell = 0;
      }
      _ref = this.aliveObjects();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        _results.push(object.update(delta));
      }
      return _results;
    };

    World.prototype.render = function() {
      var object, _i, _len, _ref, _results;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      this.drawLanes();
      this.drawScore();
      _ref = this.aliveObjects();
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        _results.push(object.render());
      }
      return _results;
    };

    World.prototype.drawLanes = function() {
      var laneX, _results;
      laneX = 0;
      _results = [];
      while (laneX <= this.width) {
        this.ctx.fillStyle = "black";
        this.ctx.fillRect(laneX, 10, this.laneLineWidth, this.height);
        _results.push(laneX += this.laneWidth);
      }
      return _results;
    };

    World.prototype.middleOfLane = function(laneNum) {
      var middleOfLane;
      return middleOfLane = this.laneLineWidth / 2 + (laneNum - 1) * this.laneWidth + this.laneWidth / 2;
    };

    World.prototype.drawScore = function() {
      this.ctx.font = "bold 16pt Arial";
      return this.ctx.fillText(this.score, this.width + 50, 30);
    };

    return World;

  })();

  FallingThing = (function() {

    FallingThing.prototype.y = 10;

    function FallingThing(world, lane) {
      this.world = world;
      this.lane = lane;
      this.height = 10;
      this.width = this.world.width / 18;
      this.lane = Math.floor(Math.random() * this.world.numLanes) + 1;
      this.centreOn(this.world.middleOfLane(this.lane));
    }

    FallingThing.prototype.render = function() {
      if (!this.dead) {
        this.world.ctx.fillStyle = "red";
        return this.world.ctx.fillRect(this.x, this.y, this.width, this.height);
      }
    };

    FallingThing.prototype.update = function(delta) {
      var inSameLaneAsPlayer, pastPlayer;
      this.y += delta * 0.15;
      pastPlayer = this.y > this.world.player.y;
      inSameLaneAsPlayer = this.lane === this.world.player.lane;
      if (pastPlayer) {
        this.destroy();
        if (inSameLaneAsPlayer) {
          return this.world.score += 1;
        }
      }
    };

    FallingThing.prototype.destroy = function() {
      return this.dead = true;
    };

    FallingThing.prototype.centreOn = function(centreX) {
      return this.x = centreX - (this.width / 2);
    };

    return FallingThing;

  })();

  Player = (function() {

    function Player(world) {
      this.world = world;
      this.lane = 2;
      this.y = this.world.height;
      this.width = this.world.width / 12;
      this.height = 10;
    }

    Player.prototype.render = function() {
      this.world.ctx.fillStyle = "blue";
      return this.world.ctx.fillRect(this.x, this.y, this.width, this.height);
    };

    Player.prototype.update = function(delta) {
      return this.centreOn(this.world.middleOfLane(this.lane));
    };

    Player.prototype.moveToLane = function(lane) {
      return this.lane = lane;
    };

    Player.prototype.centreOn = function(centreX) {
      return this.x = centreX - (this.width / 2);
    };

    return Player;

  })();

}).call(this);
