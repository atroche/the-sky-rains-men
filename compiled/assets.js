// Generated by CoffeeScript 1.3.3
(function() {
  var AssetManager, math, util,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  AssetManager = (function() {
    var callback, codecs, filetypes;

    function AssetManager(manifest) {
      var contents, name, _ref;
      this.callbacks = {
        load: {},
        complete: {},
        error: {}
      };
      this.base = manifest.baseUrl || "";
      this.packs = {};
      this.total = this.complete = 0;
      _ref = manifest.packs;
      for (name in _ref) {
        contents = _ref[name];
        this.packs[name] = contents;
        this.total += contents.length;
      }
      manifest.preload && this.downloadAll();
    }

    AssetManager.prototype.download = function(pack) {
      var asset, contents, data, ext, key, that, value, _i, _len;
      that = this;
      contents = this.packs[pack];
      if (contents == null) {
        log(2, "Pack " + pack + " does not exist");
        return false;
      }
      if (contents.loaded !== contents.length) {
        contents.loaded = 0;
        for (_i = 0, _len = contents.length; _i < _len; _i++) {
          asset = contents[_i];
          ext = asset.src.split(".").pop();
          asset.src = this.base + asset.src;
          asset.pack = pack;
          for (key in filetypes) {
            value = filetypes[key];
            if (__indexOf.call(value, ext) >= 0) {
              asset.type = key;
            }
          }
          if (asset.type == null) {
            log(2, "Unknown asset type for extension: " + ext);
            return false;
          }
          switch (asset.type) {
            case "image":
              data = new Image();
              data.a = asset;
              data.onload = function() {
                var a, canvas;
                canvas = util.imgToCanvas(this);
                a = util.mixin(canvas, this.a);
                return that.loaded(a);
              };
              data.onerror = function() {
                return callback.call(that, this.a, false);
              };
              data.src = asset.src;
              break;
            case "sound":
              asset.alt = this.base + asset.alt;
              data = new Audio();
              data.preload = "none";
              asset = util.mixin(data, asset);
              if (!data.canPlayType(codecs[ext])) {
                asset.src = asset.alt;
              }
              asset.onerror = function() {
                return callback.call(that, asset, false);
              };
              asset.addEventListener('canplaythrough', function() {
                return that.loaded(this);
              });
              asset.load();
          }
        }
      }
    };

    AssetManager.prototype.loaded = function(asset) {
      var pack, _name, _ref;
      pack = this.packs[asset.pack];
      if ((_ref = this[_name = asset.pack]) == null) {
        this[_name] = {};
      }
      this[asset.pack][asset.name] = asset;
      return callback.call(this, asset, true);
    };

    AssetManager.prototype.downloadAll = function() {
      var key, val, _ref, _results;
      _ref = this.packs;
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        _results.push(this.download(key));
      }
      return _results;
    };

    AssetManager.prototype.on = function(e, pack, fn) {
      var _base, _name, _ref, _ref1;
      if (e === "load" || e === "complete" || e === "error") {
        if (pack === "all") {
          if ((_ref = this[_name = "on" + e]) == null) {
            this[_name] = [];
          }
          return this["on" + e].push(fn);
        } else {
          if ((_ref1 = (_base = this.callbacks[e])[pack]) == null) {
            _base[pack] = [];
          }
          return this.callbacks[e][pack].push(fn);
        }
      }
    };

    callback = function(asset, status) {
      var afuncs, apercent, func, funcs, pack, percent, s, _i, _j, _len, _len1, _results;
      pack = this.packs[asset.pack];
      percent = math.round(++pack.loaded / pack.length * 100);
      apercent = math.round(++this.complete / this.total * 100);
      funcs = [];
      afuncs = [];
      if (status) {
        s = "load";
      } else {
        s = "error";
      }
      funcs = funcs.concat(this.callbacks[s][asset.pack]);
      afuncs = afuncs.concat(this["on" + s]);
      if (percent === 100) {
        funcs = funcs.concat(this.callbacks.complete[asset.pack]);
      }
      if (apercent === 100) {
        afuncs = afuncs.concat(this.oncomplete);
      }
      for (_i = 0, _len = funcs.length; _i < _len; _i++) {
        func = funcs[_i];
        if (func) {
          func(asset, percent);
        }
      }
      _results = [];
      for (_j = 0, _len1 = afuncs.length; _j < _len1; _j++) {
        func = afuncs[_j];
        if (func) {
          _results.push(func(asset, apercent));
        }
      }
      return _results;
    };

    filetypes = {
      image: ["png", "gif", "jpg", "jpeg", "tiff"],
      sound: ["mp3", "ogg", "wav"]
    };

    codecs = {
      'mp3': 'audio/mpeg',
      'ogg': 'audio/ogg',
      'wav': 'audio/wav'
    };

    return AssetManager;

  })();

  window.AssetManager = AssetManager;

  util = {
    canvas: function() {
      return document.createElement("canvas");
    },
    imgToCanvas: function(i) {
      var c, cx;
      c = this.canvas();
      c.src = i.src;
      c.width = i.width;
      c.height = i.height;
      cx = c.getContext("2d");
      cx.drawImage(i, 0, 0, i.width, i.height);
      return c;
    },
    isArray: function(value) {
      return Object.prototype.toString.call(value) === '[object Array]';
    },
    remove: function(a, val) {
      var idx;
      idx = a.indexOf(val);
      return idx && a.splice(idx, 1);
    },
    mixin: function(obj, mixin) {
      var method, name;
      for (name in mixin) {
        method = mixin[name];
        if (method !== null) {
          if (method.slice) {
            obj[name] = method.slice(0);
          } else {
            obj[name] = method;
          }
        }
      }
      return obj;
    },
    IE: function() {
      return //@cc_on navigator.appVersion;
    }
  };

  math = {
    round: function(num) {
      return (0.5 + num) | 0;
    }
  };

}).call(this);
