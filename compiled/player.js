// Generated by CoffeeScript 1.3.3
(function() {
  var Player,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Player = (function(_super) {

    __extends(Player, _super);

    Player.prototype.imgName = "player";

    Player.prototype.hitboxX = 0;

    Player.prototype.hitboxY = 5;

    Player.prototype.hitboxWidth = 64;

    Player.prototype.hitboxHeight = 30;

    function Player(world) {
      var num;
      this.world = world;
      Player.__super__.constructor.call(this);
      this.lane = 2;
      this.y = 500;
      this.speed = this.world.playerSpeed || 1.2;
      this.returnSpeed = this.speed * 2;
      this.swordSounds = (function() {
        var _i, _results;
        _results = [];
        for (num = _i = 1; _i <= 4; num = ++_i) {
          _results.push(this.world.assets.core["sword" + num]);
        }
        return _results;
      }).call(this);
      this.centreOn(this.world.middleOfLane(2));
    }

    Player.prototype.update = function(delta) {
      if (this.world.gameOver()) {
        this.dyingSound.play();
        return this.destroy();
      }
    };

    Player.prototype.leftOfCentre = function() {
      return this.centre() <= this.world.middleOfLane(2);
    };

    Player.prototype.rightOfCentre = function() {
      return this.centre() >= this.world.middleOfLane(2);
    };

    Player.prototype.moveLeft = function(delta) {
      var newPos;
      newPos = this.x - this.speed * delta;
      if (newPos + (this.width / 2) > (this.world.middleOfLane(1)) && this.leftOfCentre()) {
        return this.x = newPos;
      } else if (this.rightOfCentre()) {
        return this.moveToCentre(delta);
      }
    };

    Player.prototype.moveRight = function(delta) {
      var newPos;
      newPos = this.x + this.speed * delta;
      if (newPos + (this.width / 2) < (this.world.middleOfLane(3)) && this.rightOfCentre()) {
        return this.x = newPos;
      } else if (this.leftOfCentre()) {
        return this.moveToCentre(delta);
      }
    };

    Player.prototype.moveToCentre = function(delta) {
      var distanceToMove;
      distanceToMove = this.returnSpeed * delta;
      if (Math.abs(this.distanceFromCentre()) <= distanceToMove) {
        this.centreOn(this.world.middleOfLane(2));
      }
      if (this.distanceFromCentre() > 200) {
        console.log("asdf");
      }
      if (this.distanceFromCentre() > 0) {
        this.x -= this.returnSpeed * delta;
      }
      if (this.distanceFromCentre() < 0) {
        return this.x += this.returnSpeed * delta;
      }
    };

    Player.prototype.distanceFromCentre = function() {
      return this.centre() - (this.world.middleOfLane(2));
    };

    Player.prototype.makeSwordNoise = function() {
      var choice;
      choice = function(array) {
        return array[Math.floor(Math.random() * array.length)];
      };
      return choice(this.swordSounds).play();
    };

    return Player;

  })(Entity);

  window.Player = Player;

}).call(this);
