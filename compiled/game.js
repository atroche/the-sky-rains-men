// Generated by CoffeeScript 1.3.3
(function() {
  var Game,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Game = (function() {

    Game.prototype.FPS = 60;

    function Game(assets) {
      this.reset = __bind(this.reset, this);

      this.toggleShowHitBoxes = __bind(this.toggleShowHitBoxes, this);

      this.setPlayerSpeed = __bind(this.setPlayerSpeed, this);

      this.main = __bind(this.main, this);

      var bg_music,
        _this = this;
      this.world = new World(assets);
      this.lastUpdate = Date.now();
      this.keysDown = {};
      this.world.canvas.addEventListener('touchmove', function(e) {
        e = e.changedTouches[0];
        _this.world.player.x = e.pageX;
        return false;
      });
      this.world.canvas.addEventListener('touchstart', function(e) {
        e = e.changedTouches[0];
        _this.world.player.x = e.pageX;
        if (_this.world.gameOver()) {
          _this.world.reset();
        }
        return false;
      });
      this.world.canvas.addEventListener('mouseup', function(e) {
        console.log('mouseup');
        return _this.keysDown = {};
      });
      $("body").keydown(function(e) {
        var movementKey, normalKey, _ref;
        _this.keysDown[e.keyCode] = true;
        normalKey = !(e.ctrlKey || e.altKey || e.shiftkey || e.metaKey);
        movementKey = (_ref = e.keyCode) === 37 || _ref === 39;
        if (e.keyCode === 80) {
          _this.togglePaused();
        }
        if (normalKey) {
          e.preventDefault();
          if (!movementKey && _this.world.gameOver()) {
            return _this.world.reset();
          }
        }
      });
      $("body").keyup(function(e) {
        var _ref;
        delete _this.keysDown[e.keyCode];
        if ((_ref = e.keyCode) === 37 || _ref === 39) {
          return e.preventDefault();
        }
      });
      bg_music = new Audio("audio/bg_music.mp3");
      bg_music.loop = true;
      bg_music.addEventListener('canplaythrough', function() {
        return bg_music.play();
      });
    }

    Game.prototype.main = function() {
      var delta;
      delta = Date.now() - this.lastUpdate;
      if (!this.paused) {
        this.update(delta);
        this.render();
      }
      return this.lastUpdate = Date.now();
    };

    Game.prototype.reactToInput = function(delta) {
      if (37 in this.keysDown) {
        return this.world.player.moveLeft(delta);
      } else if (39 in this.keysDown) {
        return this.world.player.moveRight(delta);
      } else if (82 in this.keysDown) {
        return this.reset();
      } else {
        return this.world.player.moveToCentre(delta);
      }
    };

    Game.prototype.update = function(delta) {
      this.reactToInput(delta);
      return this.world.update(delta);
    };

    Game.prototype.render = function() {
      return this.world.render();
    };

    Game.prototype.run = function() {
      return setInterval(this.main, 1000 / this.FPS);
    };

    Game.prototype.setPlayerSpeed = function(speed) {
      return this.world.playerSpeed = speed;
    };

    Game.prototype.toggleShowHitBoxes = function(state) {
      return this.world.showHitBoxes = state;
    };

    Game.prototype.reset = function() {
      return this.world.reset();
    };

    Game.prototype.togglePaused = function() {
      return this.paused = !this.paused;
    };

    return Game;

  })();

  window.Game = Game;

}).call(this);
