// Generated by CoffeeScript 1.3.3
(function() {
  var Entity;

  Entity = (function() {

    Entity.prototype.hitboxX = 0;

    Entity.prototype.hitboxY = 0;

    Entity.prototype.hitboxWidth = 0;

    Entity.prototype.hitboxHeight = 0;

    function Entity() {
      this.image = this.world.assets.core[this.imgName];
      this.width = this.image.width;
      this.height = this.image.height;
    }

    Entity.prototype.render = function() {
      if (!this.dead) {
        this.world.ctx.drawImage(this.image, this.x, this.y);
        if (this.world.showHitBoxes) {
          this.world.ctx.strokeStyle = "white";
          return this.world.ctx.strokeRect(this.x, this.y, this.width, this.height);
        }
      }
    };

    Entity.prototype.destroy = function() {
      return this.dead = true;
    };

    Entity.prototype.centreOn = function(centreX) {
      return this.x = centreX - (this.width / 2);
    };

    Entity.prototype.centre = function() {
      return this.x + this.width / 2;
    };

    Entity.prototype.isCollidingWith = function(otherEntity) {
      var dir, dx, dy, h, hx, otherHeight, otherWidth, otherX, otherY, px, py, thisHeight, thisWidth, thisX, thisY, w, wy;
      thisWidth = this.width + this.hitboxWidth;
      thisHeight = this.height + this.hitboxHeight;
      otherWidth = otherEntity.hitboxWidth || otherEntity.width;
      otherHeight = otherEntity.hitboxHeight || otherEntity.height;
      w = (thisWidth + otherWidth) / 2;
      h = (thisHeight + otherHeight) / 2;
      thisX = this.x + this.hitboxX;
      thisY = this.y + this.hitboxY;
      otherY = otherEntity.y + otherEntity.hitboxY;
      otherX = otherEntity.x + otherEntity.hitboxX;
      dx = (thisX + thisWidth / 2) - (otherX + otherWidth / 2);
      dy = (thisY + thisHeight / 2) - (otherY + otherHeight / 2);
      if (Math.abs(dx) <= w && Math.abs(dy) <= h) {
        wy = w * dy;
        hx = h * dx;
        if (wy > hx) {
          if (wy > -hx) {
            dir = "top";
          } else {
            dir = "left";
          }
        } else {
          if (wy > -hx) {
            dir = "right";
          } else {
            dir = "bottom";
          }
        }
        px = w - (dx < 0 ? -dx : dx);
        py = h - (dy < 0 ? -dy : dy);
        return {
          "dir": dir,
          "pv": [(dx < 0 ? -px : px), (dy < 0 ? -py : py)]
        };
      }
      return false;
    };

    return Entity;

  })();

  window.Entity = Entity;

}).call(this);
